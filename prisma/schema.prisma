// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//user model
//id ko object id ke sath map karne ke iye har model ki this type of id hogi
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique //? mark meas it is optional
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt //@updatedAt it is obj;
  favoriteIds String[] @db.ObjectId

  accounts Account[] //may posible that many account of a user
  listings Listing[]
  reservations Reservation[] //possible that many reservation
}

//account[] used for social login hence must create account model otherwise social login not work.

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String 
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
//define the relation User using the field userId take refer id of user 
@@unique([provider, providerAccountId])//uniqe combination of both
}

model Listing {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String 
  imageSrc String
  createdAt DateTime @default(now())
  category String
  roomCount Int 
  bathroomCount Int 
  guestCount Int 
  locationValue String
  userId String @db.ObjectId
  price Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  reservations Reservation[]
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int 
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade) 

}
///////////////////////////////////////////////////